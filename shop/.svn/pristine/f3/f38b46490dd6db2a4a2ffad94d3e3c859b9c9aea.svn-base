package com.shop.controller.user;

import java.util.List;

import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.shop.controller.base.RequestContext;
import com.shop.entity.Product;
import com.shop.entity.vo.PageSet;
import com.shop.service.ProductService;

@Component
@RequestMapping(value = "/user/product")
public class ProductController extends RequestContext {

	@Autowired
	private ProductService productservice;

	@ResponseBody
	@RequestMapping(value = "/test", method = RequestMethod.POST)
	public void test() {

		String test = "product : test";

		productservice.test(test);

		System.out.println("ddd");
	}

	/**
	 * 查询 某一 店铺下 的 所有商品
	 */
	@ResponseBody
	@RequestMapping(value = "/findByshop", method = RequestMethod.POST, consumes = "application/json")
	public JSONObject findByshop(@RequestBody JSONObject json,
			HttpServletResponse res) {

		String shopUuid = null;
		String pageIndex = null;
		Integer pageSize = null;
		try {
			shopUuid = json.getString("shopUuid");

			pageIndex = json.getString("pageIndex");

			pageSize = json.optInt("pageSize");
		} catch (Exception e) {

			res.setStatus(403);
			e.printStackTrace();

			return null;
		}

		PageSet<Product> productpageset = null;
		try {
			productpageset = productservice.findByshop(shopUuid, pageIndex,
					pageSize);
		} catch (Exception e) {
			res.setStatus(505);
			e.printStackTrace();
			return null;
		}

		/*
		 * 封装 Pageset
		 */

		List<Product> productlist = productpageset.getList();
		JSONArray jasonarray = new JSONArray();

		for (int i = 0; i < productlist.size(); i++) {

			Product product = productlist.get(i);
			/**
			 * 在将每个对象转为json对象的时候用setExcludes函数将级联的属性去除掉
			 */
			JsonConfig config = new JsonConfig();
			config.setExcludes(new String[] { "shop", "promotion", "collects",
					"prodCommts", "thirdClass", "cartitems", "pictureRelates",
					"skuProds" });
			JSONObject returnobject = JSONObject.fromObject(product, config);

			jasonarray.add(returnobject);
		}

		/**
		 * 在将每个对象转为json对象的时候用setExcludes函数将级联的属性去除掉
		 */
		JsonConfig config1 = new JsonConfig();
		config1.setExcludes(new String[] { "list", "userdefinedlist" });
		JSONObject jsonobject = JSONObject.fromObject(productpageset, config1);
		/**
		 * 封装 两个 json
		 */
		JSONObject returnjson = new JSONObject();
		returnjson.put("commtlist", jasonarray);
		returnjson.put("pageSet", jsonobject);

		return returnjson;
	}

	/**
	 * 查询 商品详情
	 */
	@ResponseBody
	@RequestMapping(value = "/findProductDetail", method = RequestMethod.POST, consumes = "application/json")
	public JSONObject findProductDetail(@RequestBody JSONObject json,
			HttpServletResponse res) {

		String prodUuid = json.getString("prodUuid");

		Product product = productservice.findProductDetail(prodUuid);

		JsonConfig config = new JsonConfig();
		config.setExcludes(new String[] { "shop", "promotion", "collects",
				"prodCommts", "thirdClass", "pictureRelates", "skuProds" });
		JSONObject returnobject = JSONObject.fromObject(product, config);

		return returnobject;
	}

	/**
	 * 获取热门商品
	 * 
	 * @param json
	 * @param res
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getPopularProduct", method = RequestMethod.POST, consumes = "application/json")
	public JSONObject getPopularProduct(@RequestBody JSONObject json,
			HttpServletResponse res) {

		int pageSize = json.getInt("pageSize");

		String pageIndex = json.getString("pageIndex");

		PageSet<Product> prodPageSet = productservice.getPopularProduct(
				pageSize, pageIndex);

		List<Product> productlist = prodPageSet.getList();
		JSONArray jsonarray = new JSONArray();
		for (int i = 0; i < productlist.size(); i++) {

			JsonConfig configprod = new JsonConfig();
			configprod.setExcludes(new String[] { "shop", "promotion", "collects",
					"prodCommts", "thirdClass", "pictureRelates", "skuProds" });
			JSONObject jsonproduct = JSONObject.fromObject(productlist.get(i),
					configprod);
			jsonarray.add(jsonproduct);
		}

		JsonConfig configcart = new JsonConfig();
		configcart.setExcludes(new String[] { "list", "userdefinedlist" });
		JSONObject pagejson = JSONObject.fromObject(prodPageSet, configcart);

		JSONObject returnobject = new JSONObject();

		returnobject.put("pageSet", pagejson);
		returnobject.put("productlist", jsonarray);

		return returnobject;
	}

	/**
	 * 获取新品
	 * 
	 * @param json
	 * @param res
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getNewProduct", method = RequestMethod.POST, consumes = "application/json")
	public JSONObject getNewProduct(@RequestBody JSONObject json,
			HttpServletResponse res) {

		int pageSize = json.getInt("pageSize");

		String pageIndex = json.getString("pageIndex");

		PageSet<Product> prodPageSet = productservice.getNewProduct(pageSize,
				pageIndex);

		List<Product> productlist = prodPageSet.getList();
		JSONArray jsonarray = new JSONArray();
		for (int i = 0; i < productlist.size(); i++) {

			JsonConfig configprod = new JsonConfig();
			configprod.setExcludes(new String[] { "shop", "promotion", "collects",
					"prodCommts", "thirdClass", "pictureRelates", "skuProds" });
			JSONObject jsonproduct = JSONObject.fromObject(productlist.get(i),
					configprod);
			jsonarray.add(jsonproduct);
		}

		JsonConfig configcart = new JsonConfig();
		configcart.setExcludes(new String[] { "list", "userdefinedlist" });
		JSONObject pagejson = JSONObject.fromObject(prodPageSet, configcart);

		JSONObject returnobject = new JSONObject();

		returnobject.put("pageSet", pagejson);
		returnobject.put("productlist", jsonarray);

		return returnobject;
	}

	/**
	 * 获取促销商品
	 * 
	 * @param json
	 * @param res
	 * @return
	 */
	@ResponseBody
	@RequestMapping(value = "/getPromotionProduct", method = RequestMethod.POST, consumes = "application/json")
	public JSONObject getPromotionProduct(@RequestBody JSONObject json,
			HttpServletResponse res) {

		int pageSize = json.getInt("pageSize");

		String pageIndex = json.getString("pageIndex");

		PageSet<Product> prodPageSet = productservice.getPromotionProduct(
				pageSize, pageIndex);

		List<Product> productlist = prodPageSet.getList();
		JSONArray jsonarray = new JSONArray();
		for (int i = 0; i < productlist.size(); i++) {

			JsonConfig configprod = new JsonConfig();
			configprod.setExcludes(new String[] { "shop", "promotion", "collects",
					"prodCommts", "thirdClass", "pictureRelates", "skuProds" });
			JSONObject jsonproduct = JSONObject.fromObject(productlist.get(i),
					configprod);
			jsonarray.add(jsonproduct);
		}

		JsonConfig configcart = new JsonConfig();
		configcart.setExcludes(new String[] { "list", "userdefinedlist" });
		JSONObject pagejson = JSONObject.fromObject(prodPageSet, configcart);

		JSONObject returnobject = new JSONObject();

		returnobject.put("pageSet", pagejson);
		returnobject.put("productlist", jsonarray);

		return returnobject;
	}
}
