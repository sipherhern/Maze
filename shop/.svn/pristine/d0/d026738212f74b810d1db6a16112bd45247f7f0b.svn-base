package com.shop.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.Query;
import org.springframework.stereotype.Component;

import com.shop.entity.Product;
import com.shop.entity.Promotion;
import com.shop.service.PromotionService;
import com.shop.util.UUIdutil;

@SuppressWarnings({ "unchecked", "rawtypes" })
@Component
public class PromotionServiceImpl extends BaseServiceImpl implements
		PromotionService {

	@Override
	public int addPromotion(Promotion promotion, int prod_id) throws Exception {
		Product product = new Product();
		Map<String, Object> prod = new HashMap<String, Object>();
		prod.put("prodId", prod_id);
		String hql = "From Product p where p.prodId = :prodId";
		List list = this.find(hql, prod);
		try {
			product = (Product) list.get(0);
			promotion.setPromUuid(UUIdutil.uuid());
			product.setPromotion(promotion);
			this.update(product);
			this.save(promotion);
			return 200;
		} catch (Exception e) {
			e.printStackTrace();
			return 404;
		}
	}

	@Override
	public int updatePromotion(Promotion promotion, int prod_id)
			throws Exception {
		// 先将原来的product对应的促销设空
		Product product = new Product();
		Map<String, Object> prod = new HashMap<String, Object>();
		prod.put("promId", promotion.getPromId());
		String hql = "From Product p inner join p.promotion prom where prom.promId = :promId";
		List list = this.find(hql, prod);
		try {
			if (list.isEmpty()) {
				return 202;
			} else {
				Object object = list.get(0);
				Object[] obj = (Object[]) object;
				product = (Product) obj[0];
				product.setPromotion(null);
				this.update(product);
			}
			// 更新
			prod.remove("promId");
			prod.put("prodId", prod_id);
			hql = "From Product p where p.prodId = :prodId";
			list = this.find(hql, prod);
			product = (Product) list.get(0);
			product.setPromotion(promotion);
			this.update(product);
			this.merge(promotion);
			return 200;
		} catch (Exception e) {
			e.printStackTrace();
			return 404;
		}
	}

	@Override
	public int deletePromotion(int prom_id) throws Exception {
		Promotion promotion = new Promotion();
		Product product = new Product();
		Map<String, Object> p = new HashMap<String, Object>();
		try {
			p.put("promId", prom_id);
			List list = this
					.find("From Promotion p inner join p.products prod where p.promId = :promId",
							p);
			if (list.isEmpty()) {
				return 202;
			} else {
				for (Object object : list) {
					Object[] obj = (Object[]) object;
					promotion = (Promotion) obj[0];
					product = (Product) obj[1];
					product.setPromotion(null);
					this.update(product);
					this.delete(promotion);
				}
			}
			return 200;
		} catch (Exception e) {
			e.printStackTrace();
			return 404;
		}
	}

	@Override
	public List<Map<String, Object>> getPromotionByPage(int shop_id) throws Exception {
		Map<String, Object> p = new HashMap<String, Object>();
		p.put("shopId", shop_id);
		String hql = "HQM:from Product p inner join p.promotion pr inner join p.shop s where s.shopId = :shopId";
		List<Map<String, Object>> result = this.find(hql, 1, 10, p);
		return result;
	}
	
	@Override
	public List<Map<String, Object>> getAllPromByPage() throws Exception {
		String hql = "HQM: select p.prodName,p.ProdSell,p.promPrice,p.promDiscount,ps.picUrl from Product p inner join p.promotion prom inner join p.pictureRelates pr inner join pr.pictures ps where prom.promEnabled = 1";
		List<Map<String, Object>> result = this.find(hql, 1, 10, null);
		return result;
	}

	@Override
	public List getPromToHomepage() throws Exception {
		String hql = "from Product p inner join p.promotion prom inner join p.pictureRelates pr inner join pr.pictures where prom.promEnabled = 1";
		Query query = this.getCurrentSession().createQuery(hql);
		query.setMaxResults(3);
		return query.list();
	}

	@Override
	public boolean judgeValidity(Date start, Date end) {
		long dif = end.getTime() - start.getTime();
		if (dif < 0) {
			return true;
		} else {
			return false;
		}
	}

	@Override
	public int updateValidity(Promotion promotion) {
		try {
			promotion.setPromEnabled(this.judgeValidity(
					promotion.getPromEndDate(), new Date()));
			this.update(promotion);
			return 200;
		} catch (Exception e) {
			e.printStackTrace();
			return 404;
		}

	}



}
